package org.maxicp.search;

import org.maxicp.util.exception.InconsistencyException;

import java.util.function.Predicate;

public interface SearchMethod {
    /**
     * Adds a listener that is called on each solution.
     *
     * @param listener the closure to be called whenever a solution is found
     */
    void onSolution(Runnable listener);

    /**
     * Adds a listener that is called whenever a failure occurs
     * and the search backtracks.
     * This happensthat when a {@link InconsistencyException} is thrown
     * when executing the closure generated by the branching.
     *
     * @param listener the closure to be called whenever a failure occurs and
     *                 the search need to backtrack
     */
    void onFailure(Runnable listener);

    /**
     * Start the solving process
     *
     * @return an object with the statistics on the search
     */
    SearchStatistics solve();

    /**
     * Start the solving process
     * with a given predicate called at each node
     * to stop the search when it becomes true.
     *
     * @param limit a predicate called at each node
     *             that stops the search when it becomes true
     * @return an object with the statistics on the search
     */
    SearchStatistics solve(Predicate<SearchStatistics> limit);

    /**
     * Start the solving process
     * with a given predicate called at each node
     * to stop the search when it becomes true.
     * The state manager saves the state
     * before executing the closure
     * and restores it after the search.
     * Any {@link InconsistencyException} that may
     * be throw when executing the closure is also catched.
     *
     * @param limit a predicate called at each node
     *             that stops the search when it becomes true
     * @param subjectTo the closure to execute prior to the search starts
     * @return an object with the statistics on the search
     */
    public SearchStatistics solveSubjectTo(Predicate<SearchStatistics> limit, Runnable subjectTo);

    /**
     * Start the solving process with a given objective.
     *
     * @param obj the objective to optimize that is tightened each
     *            time a new solution is found
     * @return an object with the statistics on the search
     */
    public SearchStatistics optimize(Objective obj);


    public SearchStatistics optimize(org.maxicp.modeling.symbolic.Objective obj, Predicate<SearchStatistics> limit);


    public SearchStatistics optimize(org.maxicp.modeling.symbolic.Objective obj);



    /**
     * Start the solving process with a given objective
     * and with a given predicate called at each node
     * to stop the search when it becomes true.
     *
     * @param toTighten the objective to optimize that is tightened each
     *            time a new solution is found
     * @param limit a predicate called at each node
     *             that stops the search when it becomes true
     * @return an object with the statistics on the search
     */
    public SearchStatistics optimize(Objective toTighten, Predicate<SearchStatistics> limit);

    /**
     * Executes a closure prior to effectively
     * starting a branch and bound depth first search
     * with a given objective to optimize
     * and a given predicate called at each node
     * to stop the search when it becomes true.
     * The state manager saves the state
     * before executing the closure
     * and restores it after the search.
     * Any {@link InconsistencyException} that may
     * be thrown when executing the closure is also catched.
     *
     * @param objToTighten the objective to optimize that is tightened each
     *            time a new solution is found
     * @param limit a predicate called at each node
     *             that stops the search when it becomes true
     * @param subjectTo the closure to execute prior to the search starts
     * @return an object with the statistics on the search
     */
    public SearchStatistics optimizeSubjectTo(Objective objToTighten, Predicate<SearchStatistics> limit, Runnable subjectTo);


    public SearchStatistics optimizeSubjectTo(org.maxicp.modeling.symbolic.Objective objToTighten, Predicate<SearchStatistics> limit, Runnable subjectTo);
}
